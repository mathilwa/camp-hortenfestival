{"version":3,"sources":["pages/landing-page/icons/matta.png","pages/landing-page/icons/unicorn.svg","pages/landing-page/icons/camp-hortenfestival.svg","pages/landing-page/LandingPage.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LandingPage","useState","x","y","mousePosition","setMousePosition","screenWidth","document","getElementById","offsetWidth","screenHeight","offsetHeight","xPosition","yPosition","className","onMouseMove","event","pageX","pageY","onClick","confetti","origin","src","matta","alt","unicorn","style","left","top","headingLogo","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,iD,iOC4C5BC,EArCK,WAAO,IAAD,EACoBC,mBAAmC,CAAEC,EAAG,EAAGC,EAAG,IADlE,mBACfC,EADe,KACAC,EADA,KAMhBC,EACFC,UAAYA,SAASC,eAAe,SAAWD,SAASC,eAAe,QAASC,YAC9EC,EACFH,UAAYA,SAASC,eAAe,SAAWD,SAASC,eAAe,QAASG,aAE9EC,EAAYR,EAAcF,EAC1BW,EAAYT,EAAcD,EAWhC,OACI,yBAAKW,UAAU,MAAMC,YAtBL,SAACC,GACjBX,EAAiB,CAAEH,EAAGc,EAAMC,MAAOd,EAAGa,EAAME,SAqBGC,QAV5B,WACnBC,YAAS,CACLC,OAAQ,CACJnB,EAAGI,EAAcM,EAAYN,EAAc,EAC3CH,EAAGO,EAAeG,EAAYH,EAAe,OAOjD,4BAAQI,UAAU,aACd,yBAAKQ,IAAKC,IAAOT,UAAU,eAAeU,IAAI,UAElD,yBAAKF,IAAKG,IAASX,UAAU,UAAUU,IAAI,UAAUE,MAAO,CAAEC,KAAMf,EAAWgB,IAAKf,KACpF,yBAAKC,UAAU,wBACX,yBAAKQ,IAAKO,OAEd,uBAAGf,UAAU,iBAAb,oBC3BQgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAiB7B,SAASC,eAAe,SD6HnD,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00bef06e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/matta.fb322a1e.png\";","module.exports = __webpack_public_path__ + \"static/media/unicorn.c53a49bb.svg\";","module.exports = __webpack_public_path__ + \"static/media/camp-hortenfestival.2a97b4a7.svg\";","import React, { useState } from 'react';\nimport matta from './icons/matta.png';\nimport unicorn from './icons/unicorn.svg';\nimport headingLogo from './icons/camp-hortenfestival.svg';\nimport './landing-page.css';\nimport confetti from 'canvas-confetti';\n\nconst LandingPage = () => {\n    const [mousePosition, setMousePosition] = useState<{ x: number; y: number }>({ x: 0, y: 0 });\n    const onMouseMove = (event: any) => {\n        setMousePosition({ x: event.pageX, y: event.pageY });\n    };\n\n    const screenWidth =\n        document && document.getElementById('root') && document.getElementById('root')!.offsetWidth;\n    const screenHeight =\n        document && document.getElementById('root') && document.getElementById('root')!.offsetHeight;\n\n    const xPosition = mousePosition.x;\n    const yPosition = mousePosition.y;\n\n    const launceConfetti = () => {\n        confetti({\n            origin: {\n                x: screenWidth ? xPosition / screenWidth : 0,\n                y: screenHeight ? yPosition / screenHeight : 0,\n            },\n        });\n    };\n\n    return (\n        <div className=\"app\" onMouseMove={onMouseMove} onClick={launceConfetti}>\n            <header className=\"appHeader\">\n                <img src={matta} className=\"spinningUser\" alt=\"logo\" />\n            </header>\n            <img src={unicorn} className=\"unicorn\" alt=\"unicorn\" style={{ left: xPosition, top: yPosition }} />\n            <div className=\"headingLogoContainer\">\n                <img src={headingLogo} />\n            </div>\n            <p className=\"festivalDates\">18. - 21. juni</p>\n        </div>\n    );\n};\n\nexport default LandingPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport LandingPage from './pages/landing-page/LandingPage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<LandingPage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}